{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changebleUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","length","labels","infectedData","deathsData","forEach","push","datasets","label","borderColor","fill","backgroundColor","lineChart","options","legent","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetechedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","key","App","state","fetchedData","setState","this","image","alt","src","coronaImg","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1b79588.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3gMUl\",\"card\":\"Cards_card__seVp3\",\"infected\":\"Cards_infected__2WOwZ\",\"recovered\":\"Cards_recovered__266bC\",\"deaths\":\"Cards_deaths__147vB\"};","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from 'classnames';\n\nimport styles from \"./Cards.module.css\";\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading....\";\n  }\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              No of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              No of recoveries of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              No of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changebleUrl = url;\n\n  if(country) {\n      changebleUrl = `${url}/countries/${country}`\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changebleUrl);\n    return {\n        confirmed,\n        recovered,\n        deaths,\n        lastUpdate,\n      };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport const fetchDailyData = async () => {\n  \n    try {\n      const {data} = await axios.get(`${url}/daily`);\n\n      const modifiedData = data.map(dailyData => ({\n          confirmed: dailyData.confirmed.total,\n          deaths: dailyData.deaths.total,\n          date: dailyData.reportDate  \n      })) \n\n      return modifiedData;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  export const fetchCountries = async () => {\n      try {\n        const {data: {countries}} = await axios.get(`${url}/countries`);\n        return countries.map(country => country.name);\n      } catch(e) {\n          console.log(e)\n      }\n  }","import React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({ country, data: {confirmed, recovered, deaths} }) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = () => {\n    const labels = [];\n    const infectedData = [];\n    const deathsData = [];\n    dailyData.forEach((data) => {\n      labels.push(data.date);\n      infectedData.push(data.confirmed);\n      deathsData.push(data.deaths);\n    });\n\n    return (\n      <Line\n        data={{\n          labels: labels,\n          datasets: [\n            {\n              data: infectedData,\n              label: \"Infected\",\n              borderColor: \"#3333ff\",\n              fill: true,\n            },\n            {\n              data: deathsData,\n              label: \"Deaths\",\n              borderColor: \"red\",\n              backgroundColor: \"rgba(255,0,0,0.5)\",\n              fill: true,\n            },\n          ],\n        }}\n      />\n    );\n  };\n\n  const barChart = () => {\n      \n    return (\n      <Bar\n        data={{\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n          datasets: [\n            {\n              label: \"People\",\n              backgroundColor: [\n                \"rgba(0,0,255, 0.5)\",\n                \"rgba(0,255, 0, 0.5)\",\n                \"rgba(255,0,0, 0.5)\",\n              ],\n              data: [confirmed.value, recovered.value, deaths.value]\n            },\n          ],\n        }}\n        options={{\n          legent: { display: false },\n          title: { display: true, text: `Current state in ${country}` },\n        }}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      {dailyData.length && !country ? lineChart(): null}\n      {dailyData.length && country ? barChart(): null}\n    </div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../api\";\n\nimport styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({handleCountryChange}) => {\n  const [fetchedCountries, setFetechedCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setFetechedCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <FormControl className={styles.formControl}>\n      <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, index) => (\n          <option key={index} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImg from './images/image.png';\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: \"\"\n}\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({data: fetchedData});\n    console.log(fetchedData);\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country});\n  }\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} alt=\"COVID-19\" src={coronaImg} />\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1AnOZ\",\"image\":\"App_image__FwJvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__a9zQe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__KLxVM\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}